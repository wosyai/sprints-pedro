{
  "scripts": 66,
  "combinations": [
    {
      "table": "credito_especial",
      "scripts": [
        "voice_interactions5.py",
        "voice_interactions9.py",
        "voice_interactions7.py",
        "voice_interactions4.py",
        "voice_interactions8.py",
        "voice_interactions6.py",
        "voice_interactions13.py",
        "voice_interactions11.py",
        "voice_interactions2.py"
      ]
    },
    {
      "table": "csv",
      "scripts": [
        "bases_diarias_sms_por_campanha_completa_flash.py",
        "bases_diarias_sms_por_campanha_completa.py",
        "blacklists.py"
      ]
    },
    {
      "table": "flash_tim",
      "scripts": [
        "flash_tim.py",
        "flash_tim.py"
      ]
    },
    {
      "table": "web_interactions_metrics",
      "scripts": [
        "web_interactions_metrics.py",
        "web_interactions_metrics.py"
      ]
    },
    {
      "table": "credito_especial (banco MySQL Credito Especial)",
      "scripts": [
        "voice_interactions12.py",
        "voice_interactions3.py"
      ]
    },
    {
      "table": "MySQL",
      "scripts": [
        "acessos_plano_claro_freefire.py",
        "acessos_uber_one.py",
        "acessos_uber_one.py",
        "acessos_claro_pay_microsite.py",
        "acessos_claro_pay_microsite.py",
        "acessos_mulheres_positivas.py",
        "acessos_mulheres_positivas.py",
        "teste2.py",
        "teste2.py",
        "acessos_prezao.py",
        "acessos_prezao.py",
        "acessos_rappi.py",
        "acessos_rappi.py",
        "acessos_entel_chile.py",
        "acessos_entel_chile.py",
        "acessos_tim.py",
        "acessos_tim.py",
        "acessos_smart_fit.py",
        "acessos_smart_fit.py",
        "acessos_triqui.py",
        "acessos_triqui.py",
        "acessos_picpay.py",
        "acessos_picpay.py",
        "acessos_gifts.py",
        "acessos_prezao_kwai.py",
        "acessos_prezao_kwai.py",
        "acessos_gifts_2.py",
        "acessos_gifts_2.py",
        "acessos_claro_rentabilizacao.py",
        "acessos_claro_rentabilizacao.py",
        "acessos_flash_beneficios.py",
        "acessos_flash_beneficios.py",
        "acessos_claro_mobilidade.py",
        "acessos_claro_mobilidade.py",
        "acessos_gifts_url.py",
        "acessos_gifts_2_url.py",
        "acessos_prezao_2.py",
        "acessos_prezao_2.py",
        "acessos_entel_peru.py",
        "acessos_entel_peru.py",
        "teste.py"
      ]
    },
    {
      "table": "CSV",
      "scripts": [
        "base_triqui_hoje.py",
        "base_triqui.py"
      ]
    },
    {
      "table": "SFTP",
      "scripts": [
        "base_triqui_hoje.py",
        "base_triqui.py"
      ]
    },
    {
      "table": "JSON",
      "scripts": [
        "acessos_gifts_2_conversion.py",
        "acessos_gifts_conversion.py"
      ]
    },
    {
      "table": "MySQL keep_on: flash_sms_claro",
      "scripts": [
        "flash_sms_claro.py",
        "flash_sms_claro.py"
      ]
    }
  ],
  "unified_sql": {
    "credito_especial": "-- Inserts padrão de voice_interactions (sem colunas específicas e sem filtro de data)\nINSERT INTO credito_especial (phone, created_at)\nSELECT phone, created_at\nFROM public.voice_interactions;\n\n-- Insert com filtro de data para voice_interactions4.py\nINSERT INTO credito_especial (telefone, id, amount, fee)\nSELECT phone, NULL, NULL, NULL -- Ajustar para as colunas corretas e valores padrão\nFROM public.voice_interactions\nWHERE created_at BETWEEN '2024-06-04 00:00:00' AND '2024-06-04 23:59:59';\n\n-- Insert para voice_interactions9.py (inclui chamada à API - precisa de função externa)\n-- Este SQL é um placeholder; a chamada à API precisa ser implementada via função no banco de dados.\n\n-- Cria uma função para chamar a API (exemplo; a implementação exata depende do seu banco de dados e extensão)\n-- CREATE OR REPLACE FUNCTION get_juvo_products(telefone TEXT)\n-- RETURNS TABLE (id INTEGER, amount NUMERIC, fee NUMERIC) AS $$\n-- BEGIN\n--   -- Implemente a chamada à API aqui, usando uma extensão como `http` para PostgreSQL\n--   -- e convertendo o resultado JSON para uma tabela.\n--   RETURN QUERY EXECUTE 'SELECT id, amount, fee FROM json_populate_recordset(NULL::seu_tipo_de_retorno, http_get(''https://keepon.media/juvo-adapter/tim/products?msisdn=' || telefone || ''')::json)';\n-- END;\n-- $$ LANGUAGE plpgsql;\n\n\n-- Insert usando a função criada (precisa descomentar e ajustar a função acima)\nINSERT INTO credito_especial (telefone, id, amount, fee)\nSELECT vi.phone, products.id, products.amount, products.fee\nFROM public.voice_interactions vi\nCROSS JOIN LATERAL get_juvo_products(vi.phone) AS products\nWHERE vi.created_at BETWEEN '2024-06-09 00:00:00' AND '2024-06-09 23:59:59';\n\n\n-- Insert padrão para scripts que inserem telefone, id, amount e fee (voice_interactions7.py)\nINSERT INTO credito_especial (telefone, id, amount, fee)\nSELECT phone, NULL, NULL, NULL -- Ajustar para as colunas corretas e valores padrão\nFROM public.voice_interactions;",
    "csv": "-- Script bases_diarias_sms_por_campanha_completa.py\n-- Este script extrai dados de várias tabelas de produção e as combina, incluindo informações de campanhas, regras e mensagens enviadas.\n-- A consulta resultante é então exportada para um arquivo CSV.\n-- Os dados são filtrados por um período de tempo específico ('{data}') e um conjunto de IDs de campanha.\n-- Além disso, os dados da tabela 'message_outbound' são incluídos, também filtrados por período e ID de campanha (2).\n\nSELECT\n    c.id AS CODIGO_CAMPANHA,\n    c.name AS NOME_CAMPANHA,\n    se.phone AS NUM_TELEFONE,\n    'SMS' AS CANAL,  -- Valor fixo 'SMS' para a coluna CANAL\n    NULL AS EMAIL,  -- Valor nulo para a coluna EMAIL (não presente nas tabelas de entrada)\n    NULL AS DATA_ENTREGA,  -- Valor nulo para a coluna DATA_ENTREGA (não presente nas tabelas de entrada)\n    NULL AS DATA_ABERTURA,  -- Valor nulo para a coluna DATA_ABERTURA (não presente nas tabelas de entrada)\n    NULL AS DATA_CLIQUE,  -- Valor nulo para a coluna DATA_CLIQUE (não presente nas tabelas de entrada)\n    NULL AS DATA_CONVERSAO,  -- Valor nulo para a coluna DATA_CONVERSAO (não presente nas tabelas de entrada)\n    se.sent_at AS DATA_ENVIO,\n    se.text AS MENSAGEM,\n    NULL AS FLAG_ENTREGUE -- Valor nulo para a coluna FLAG_ENTREGUE\nFROM\n    production.sent_messages se\nJOIN\n    production.rules r ON se.rule_id = r.id\nJOIN\n    production.campaigns c ON se.campaign_id = c.id\nWHERE\n    se.sent_at BETWEEN '{data} 00:00:00' AND '{data} 23:59:59'\n    AND c.id IN (148, 150, 149, 151, 1, 2, 3, 7, 27, 62, 63, 110, 111, 128, 129, 130, 131, 118, 141)\n\nUNION ALL\n\nSELECT\n    mo.campaign_id AS CODIGO_CAMPANHA,\n    ca.name AS NOME_CAMPANHA,\n    mo.msisdn AS NUM_TELEFONE,\n    'SMS' AS CANAL,  -- Valor fixo 'SMS' para a coluna CANAL\n    NULL AS EMAIL,  -- Valor nulo para a coluna EMAIL (não presente nas tabelas de entrada)\n    NULL AS DATA_ENTREGA,  -- Valor nulo para a coluna DATA_ENTREGA (não presente nas tabelas de entrada)\n    NULL AS DATA_ABERTURA,  -- Valor nulo para a coluna DATA_ABERTURA (não presente nas tabelas de entrada)\n    NULL AS DATA_CLIQUE,  -- Valor nulo para a coluna DATA_CLIQUE (não presente nas tabelas de entrada)\n    NULL AS DATA_CONVERSAO,  -- Valor nulo para a coluna DATA_CONVERSAO (não presente nas tabelas de entrada)\n    mo.sent_at AS DATA_ENVIO,\n    mo.message AS MENSAGEM,\n    NULL AS FLAG_ENTREGUE -- Valor nulo para a coluna FLAG_ENTREGUE\nFROM\n    message_outbound mo\nJOIN\n    campaigns ca ON mo.campaign_id = ca.id\nWHERE\n    mo.sent_at BETWEEN '{data} 00:00:00' AND '{data} 23:59:59'\n    AND mo.campaign_id = 2;\n\n-- Script blacklists.py\n-- Este script simplesmente seleciona todos os números de telefone da tabela 'blacklists'.\n-- A consulta resultante é exportada para um arquivo CSV.\n\nSELECT msisdn FROM blacklists;\n\n--Script bases_diarias_sms_por_campanha_completa_flash.py\n-- Este script não requer código SQL pois apenas cria um arquivo CSV. A criação do arquivo pode ser tratada separadamente no código.",
    "flash_tim": "-- BEGIN TRANSACTION; -- Opcional: Utilize se precisar garantir atomicidade da operação\n\nDELETE FROM flash_tim\nWHERE date >= '{data} 00:00:00';\n\nINSERT INTO flash_tim (notification, status, date, message, campaign_id)\nSELECT \n    id AS notification,\n    status,\n    sent_at AS date,\n    message,\n    campaign_id\nFROM message_outbound\nWHERE sent_at >= '{data} 00:00:00';\n\n-- COMMIT; -- Opcional: Utilize se iniciou uma transação.",
    "web_interactions_metrics": "-- Deleta os dados existentes para o dia especificado na tabela web_interactions_metrics (MySQL).\nDELETE FROM web_interactions_metrics\nWHERE created_at >= '{data} 00:00:00';\n\n-- Insere novos dados agregados na tabela web_interactions_metrics (MySQL) a partir da tabela public.web_interactions (PostgreSQL).\nINSERT INTO web_interactions_metrics (accesses, unique_accesses, ga_to, de, para, ga_from, origin, host, created_at)\nSELECT\n    COUNT(*) AS accesses,\n    COUNT(DISTINCT anonymous) AS unique_accesses,\n    ga_to,\n    `from` AS de, -- Renomeia a coluna 'from' para 'de' para evitar conflitos de palavras reservadas no MySQL.\n    `to` AS para,  -- Renomeia a coluna 'to' para 'para' para evitar conflitos de palavras reservadas no MySQL.\n    ga_from,\n    origin,\n    host,\n    DATE(created_at) AS created_at -- Trunca o created_at para a data.\nFROM public.web_interactions\nWHERE host IN ('suatimlive.com.br', 'timofertas.com', 'internetfibratim.com.br')\n  AND created_at >= '{data} 00:00:00'\nGROUP BY ga_to, de, para, ga_from, origin, host, DATE(created_at);",
    "credito_especial (banco MySQL Credito Especial)": "-- Insere dados do dia 2024-06-13\nINSERT INTO credito_especial (telefone, id, amount, fee)\nSELECT \n    vi.phone,\n    -- Preencha com a lógica para extrair 'id', 'amount' e 'fee' da API Keepon \n    -- Substitua as próximas 3 linhas por essa lógica.  Exemplo:\n    -- JSON_EXTRACT(api_response, '$.id'), \n    -- JSON_EXTRACT(api_response, '$.amount'),\n    -- JSON_EXTRACT(api_response, '$.fee')\n    NULL, -- Substitua por uma expressão para obter 'id' da API\n    NULL, -- Substitua por uma expressão para obter 'amount' da API\n    NULL  -- Substitua por uma expressão para obter 'fee' da API\nFROM public.voice_interactions vi\nWHERE vi.created_at BETWEEN '2024-06-13 00:00:00' AND '2024-06-13 23:59:59';\n\n-- Insere dados do dia 2024-06-03\nINSERT INTO credito_especial (telefone, id, amount, fee)\nSELECT \n    vi.phone,\n    -- Preencha com a lógica para extrair 'id', 'amount' e 'fee' da API Keepon \n    -- Substitua as próximas 3 linhas por essa lógica.  Exemplo:\n    -- JSON_EXTRACT(api_response, '$.id'), \n    -- JSON_EXTRACT(api_response, '$.amount'),\n    -- JSON_EXTRACT(api_response, '$.fee')\n    NULL, -- Substitua por uma expressão para obter 'id' da API\n    NULL, -- Substitua por uma expressão para obter 'amount' da API\n    NULL  -- Substitua por uma expressão para obter 'fee' da API\nFROM public.voice_interactions vi\nWHERE vi.created_at BETWEEN '2024-06-03 00:00:00' AND '2024-06-03 23:59:59';",
    "MySQL": "-- Este script SQL unificado é um esqueleto e precisa de adaptação, pois:\n-- 1.  Não é possível acessar diretamente dados do MongoDB no SQL. É necessário um processo ETL (Extração, Transformação e Carga) para mover os dados do MongoDB para tabelas temporárias no MySQL.  Os INSERTs pressupõem que os dados já foram agregados e transformados.\n-- 2. As datas 'data_inicial' e 'data_final' são variáveis.  Você precisará substituí-las pelos valores reais usando variáveis ou stored procedures.  O uso de `CURDATE() - INTERVAL 1 DAY` ou funções similares dependerá do dialeto SQL exato que você está utilizando.\n-- 3. A coluna 'qtd' (quantidade) é frequentemente mencionada, o que sugere que você precisa realizar agregações dos dados antes de inseri-los.\n-- 4. Os scripts DELETE e INSERT podem se beneficiar do uso de stored procedures para maior modularidade.\n-- 5.  A coluna `id` está presente em um único INSERT (acessos_triqui.py).\n\n-- Tabela temporária para dados do MongoDB (Exemplo - Adapte conforme suas necessidades)\n-- DROP TEMPORARY TABLE IF EXISTS temp_acessos_keepon;\n-- CREATE TEMPORARY TABLE temp_acessos_keepon (\n--     msisdn VARCHAR(255),\n--     utm_source VARCHAR(255),\n--     utm_medium VARCHAR(255),\n--     utm_campaign VARCHAR(255),\n--     Referer VARCHAR(255),\n--     project VARCHAR(255),\n--     event VARCHAR(255),\n--     element VARCHAR(255),\n--     user_id VARCHAR(255),\n--     url VARCHAR(255),\n--     offer_type VARCHAR(255),\n--     service_type VARCHAR(255),\n--     request_id VARCHAR(255),\n--     offer_id VARCHAR(255),\n--     success BOOLEAN,\n--     offer VARCHAR(255),\n--     price DECIMAL(10,2),\n--     operator VARCHAR(255),\n--     zip_code VARCHAR(255),\n--     offer_metadata_brand VARCHAR(255),\n--     offer_metadata_value VARCHAR(255),\n--     service_name VARCHAR(255),\n--     sessionId VARCHAR(255),\n--     qtd INT,\n--     event_date DATE\n-- );\n\n-- DELETEs --\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project IN ('ClaroHub', 'ClaroFreeFire');\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = 'data_inicial'  -- Substitua 'data_inicial' pela data real\nAND project = 'uber_one';\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = 'data_inicial'  -- Substitua 'data_inicial' pela data real\nAND project IN ('claro_pay', 'microsite');\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project = 'mulheres-positivas';\n\nDELETE FROM local_keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project IN ('tim_fun', 'prezao_uber');\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project IN ('FreeFire', 'Youtube', 'venda_prezao_uber');\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project = 'Rappi';\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project = 'Entel_chile';\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project = 'Tim';\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = 'data_inicial' -- Substitua 'data_inicial' pela data real\nAND project IN ('smartfit');\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project = 'triqui';\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project = 'Picpay';\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE()\nAND project IN ('tim_fun', 'CLUBE-BELEZA', 'prezao_uber', 'movistar');\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date >= CURDATE()\nAND event_date < CURDATE() + INTERVAL 1 DAY\nAND project = 'prezao_kwai';\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = 'data_inicial' -- Substitua 'data_inicial' pela data real\nAND project IN ('tim_fun_url','CLUBE-BELEZA-URL', 'PREZAO_UBER_URL', 'movistar_url');\n\nDELETE FROM local_keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project IN ('tim_fun_url', 'CLUBE-BELEZA-URL', 'PREZAO_UBER_URL', 'movistar_url');\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = 'data_inicial_variavel'  -- Substitua 'data_inicial_variavel' pela data real\nAND project IN ('FreeFire', 'Youtube');\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = 'data_inicial'  -- Substitua 'data_inicial' pela data real\nAND project = 'Entel_peru';\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project = 'Claro-Rentabilizacao';\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project = 'planosCelular';\n\nDELETE FROM keepon.acessos_keepon\nWHERE event_date = CURDATE() - INTERVAL 1 DAY\nAND project = 'Claro-Mobilidade';\n\n-- INSERTs --\n-- Os INSERTs precisam ser adaptados para refletir a estrutura da tabela temp_acessos_keepon\n-- e os dados que você agregou do MongoDB.  Os exemplos abaixo são genéricos e precisam ser ajustados.\n\n-- Exemplo de INSERT genérico (adaptar!)\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, Referer, project, success, event, element, qtd, event_date)\n-- SELECT msisdn, utm_source, utm_medium, utm_campaign, Referer, project, success, event, element, COUNT(*), CURDATE() - INTERVAL 1 DAY\n-- FROM temp_acessos_keepon\n-- WHERE event_date = CURDATE() - INTERVAL 1 DAY\n-- AND project IN ('ClaroHub', 'ClaroFreeFire')\n-- GROUP BY msisdn, utm_source, utm_medium, utm_campaign, Referer, project, success, event, element;\n\n-- Inserts específicos (ADAPTAR COMPLETAMENTE)\n\n-- acessos_uber_one.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, offer, referer, event, element, user_id, success, offer_type, url, qtd, event_date, project)\n-- SELECT ... FROM temp_acessos_keepon WHERE project = 'uber_one' ...;\n\n-- acessos_claro_pay_microsite.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, referer, project, success, event, element, price, qtd, event_date)\n-- SELECT ... FROM temp_acessos_keepon WHERE project IN ('claro_pay', 'microsite') ...;\n\n-- acessos_mulheres_positivas.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, offer, Referer, project, event, element, userId, success, offer_type, url, qtd, event_date)\n-- SELECT ... FROM temp_acessos_keepon WHERE project IN ('MULHERES_POSITIVAS', 'mulheres-positivas') ...;\n\n-- teste2.py\n-- INSERT INTO local_keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, Referer, project, event, element, userId, url, offer_type, service_type, request_id, offer_id, qtd, event_date)\n-- SELECT ... FROM temp_acessos_keepon WHERE project IN ('tim_fun', 'prezao_uber') ...;\n\n-- acessos_prezao.py\n-- INSERT INTO keepon.acessos_keepon (...) SELECT ... FROM temp_acessos_keepon WHERE project IN ('Garena', 'PrezaoYoutube', 'PREZAO_UBER', 'venda_prezao_uber') ...;\n\n-- acessos_rappi.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, Referer, success, event, element, userId, url, offerId, offer_id, qtd, event_date, project)\n-- SELECT ... FROM temp_acessos_keepon WHERE project = 'Rappi' OR channel = 'RAPPI_ENTREGADORES' ...;\n\n-- acessos_entel_chile.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, Referer, event, element, user_Id, url, offer_type, qtd, event_date, project)\n-- SELECT ... FROM temp_acessos_keepon WHERE project = 'Entel_chile' ...;\n\n-- acessos_tim.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, Referer, event, element, user_id, url)\n-- SELECT ... FROM temp_acessos_keepon WHERE project = 'Tim' ...;\n\n-- acessos_smart_fit.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, referer, project, event, element, user_id, url, sessionId, success, qtd, event_date)\n-- SELECT ... FROM temp_acessos_keepon WHERE project = 'smartfit' ...;\n\n-- acessos_triqui.py\n-- INSERT INTO keepon.acessos_keepon (id, msisdn, utm_source, utm_medium, utm_campaign, Referer, event, element, userId, url, price, qtd, event_date, project)\n-- SELECT NULL, ... FROM temp_acessos_keepon WHERE project = 'triqui' ...; -- 'id' auto-incremento ou usar NULL\n\n-- acessos_picpay.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, Referer, event, element)\n-- SELECT ... FROM temp_acessos_keepon WHERE utm_source IN ('picpay', 'PICPAY') ...;\n\n-- acessos_prezao_kwai.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, offer, referer, project, event, element, userId, success, offer_type, url, event_date, qtd)\n-- SELECT ... FROM temp_acessos_keepon WHERE project = 'prezao_kwai' ...;\n\n-- acessos_gifts_2.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, Referer, project, event, element, userId, url, offer_type, service_type, requestId, offer_id, success, qtd)\n-- SELECT ... FROM temp_acessos_keepon WHERE project IN ('tim_fun', 'CLUBE-BELEZA', 'prezao_uber', 'movistar') ...;\n\n-- acessos_claro_rentabilizacao.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, offer, referer, project, event, element, userId, success, offer_type, url, qtd, event_date)\n-- SELECT ... FROM temp_acessos_keepon WHERE project IN ('CLARO-RENTABILIZACAO', 'Claro-Rentabilizacao') ...;\n\n-- acessos_flash_beneficios.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, offer, Referer, event, element, user_id, url, qtd)\n-- SELECT ... FROM temp_acessos_keepon WHERE project = 'planosCelular' ...;\n\n-- acessos_claro_mobilidade.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, Referer, event, element, user_id, url, offer_type, service_type, qtd, event_date, project)\n-- SELECT ... FROM temp_acessos_keepon WHERE project = 'Claro-Mobilidade' ...;\n\n-- acessos_prezao_2.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, referer, project, event, element, userId, url, operator, success, qtd, event_date)\n-- SELECT ... FROM temp_acessos_keepon WHERE project IN ('Garena', 'PrezaoYoutube') ...;\n\n-- acessos_entel_peru.py\n-- INSERT INTO keepon.acessos_keepon (msisdn, utm_source, utm_medium, utm_campaign, referer, event, element, user_id, url, offer_type, qtd, event_date, project)\n-- SELECT ... FROM temp_acessos_keepon WHERE project = 'Entel' OR channel = 'ENTEL' ...;\n\n-- teste.py\n-- INSERT INTO keepon.acessos_keepon (user_id, utm_source, utm_medium, utm_campaign, Referer, project, event, element, url, operator, success, service_name, qtd, event_date)\n-- SELECT ... FROM temp_acessos_keepon WHERE event = 'conversion' AND product_id = 18 AND utm_source IN ('cupom_uberprezao', 'TIM-FUN', 'Rentabilizacao', 'CLARO-VIP', 'MOVISTAR-CO', 'SEGUROBET') ...;\n\n-- Limpeza da tabela temporária (opcional)\n-- TRUNCATE TABLE temp_acessos_keepon;\n",
    "CSV": "-- Considerando que o objetivo é unificar a extração dos dados para gerar o CSV, o SQL abaixo combina os dados das tabelas triquis e awards.\n-- A lógica de extração dos dados do XML (Host, Port, User, Pass) precisaria ser implementada na linguagem de script (Python) e não pode ser diretamente incluída no SQL.\n-- Assumindo que a coluna 'id' na tabela 'awards' corresponde à coluna 'award_id' na tabela 'triquis', o SQL fará o JOIN nessas colunas.\n-- A formatação da data e a criação do arquivo CSV são tarefas para o script Python. O SQL apenas prepara os dados.\n\nSELECT\n    t.msisdn,\n    t.award_id,\n    t.created_at,\n    t.status,\n    a.name AS award_name,\n    a.description AS award_description\nFROM\n    triquis t\nJOIN\n    awards a ON t.award_id = a.id;\n\n-- Este SQL recupera as colunas necessárias das tabelas triquis e awards.\n-- Os resultados desta consulta podem ser usados para criar o arquivo CSV em seu script Python.\n-- Lembre-se de adicionar a lógica para extrair os dados do XML (Host, Port, User, Pass) no seu script e usá-los conforme necessário (ex: conexão SFTP).",
    "SFTP": "-- Este script SQL unificado visa preparar os dados para upload SFTP,\n-- combinando informações das tabelas `triquis` e `awards`.\n\n-- Etapa 1: Junte as tabelas triquis e awards\n-- Supondo que `award_id` em `triquis` corresponde a `id` em `awards`.\n\nSELECT\n    t.msisdn,\n    t.award_id,\n    t.created_at,\n    t.status,\n    a.name AS award_name,\n    a.description AS award_description\nFROM\n    triquis t\nJOIN\n    awards a ON t.award_id = a.id;\n\n-- Etapa 2: Formate os dados para CSV (opcional, dependendo do driver SFTP)\n-- Esta etapa pode ser necessária se o seu driver SFTP não lidar automaticamente\n-- com a conversão de tipos de dados MySQL para CSV.  A formatação exata\n-- dependerá dos requisitos do sistema SFTP.\n\n-- Exemplo de formatação para CSV:\n\nSELECT\n    CONCAT(\n        t.msisdn, ',',\n        t.award_id, ',',\n        DATE_FORMAT(t.created_at, '%Y-%m-%d %H:%i:%s'), ',',\n        t.status, ',',\n        a.name, ',',\n        a.description\n    ) AS csv_line\nFROM\n    triquis t\nJOIN\n    awards a ON t.award_id = a.id;\n\n-- NOTAS IMPORTANTES:\n\n-- 1.  **`{data_inicial}` não é tratado no SQL:** Os scripts Python indicam que o nome do arquivo\n--     é dinâmico e depende da variável `{data_inicial}`.  O SQL *não* pode diretamente\n--     lidar com isso.  A substituição de `{data_inicial}` deve ser feita *antes* ou *depois*\n--     de executar este SQL, provavelmente na parte Python do processo.\n\n-- 2.  **Host, Porta, Usuário, Senha do SFTP:**  As informações de conexão SFTP (Host, Port, User, Pass)\n--     são obtidas de um arquivo XML.  O SQL *não* pode acessar diretamente arquivos XML.\n--     Essas informações devem ser lidas pelo script Python e utilizadas no momento do\n--     upload para o SFTP.  Este SQL apenas prepara os dados.\n\n-- 3.  **Criação/Upload SFTP:** O SQL *não* faz o upload para o SFTP.  O upload é uma tarefa\n--     separada, geralmente realizada por um cliente SFTP ou biblioteca SFTP dentro do\n--     script Python. Este SQL apenas prepara os dados que serão enviados.\n\n-- 4.  **Operação (CREATE):** Ambos os scripts usam \"CREATE\" como operação. Presume-se que isso\n--     signifique que o arquivo CSV no SFTP deve ser criado (e potencialmente substituído se já existir).\n--     O código Python SFTP deve garantir que essa operação seja executada corretamente.\n\n-- 5.  **Tratamento de erros:**  Adicione tratamento de erros apropriado ao seu script Python para\n--      lidar com falhas na conexão com o MySQL, na execução da consulta SQL, na criação do CSV\n--      e no upload para o SFTP.\n\n-- 6.  **Formato CSV:**  O formato CSV (delimitador, caractere de escape, etc.) pode precisar ser\n--      ajustado com base nas necessidades do sistema SFTP.  O exemplo usa vírgula como delimitador\n--      e assume que os campos não contêm vírgulas.\n\n-- 7.  **Segurança:**  Nunca armazene senhas (especialmente senhas SFTP) diretamente no código.\n--      Use variáveis de ambiente ou um gerenciador de segredos para proteger as credenciais.",
    "JSON": "-- Não é possível gerar um único script SQL a partir da descrição fornecida, pois os scripts originais acessam o MongoDB e criam arquivos JSON. O SQL é usado para interagir com bancos de dados relacionais, não diretamente com MongoDB ou arquivos JSON.\n\n-- A lógica descrita envolve:\n-- 1. Extrair dados do MongoDB (coleção 'events' no banco de dados 'keepon').\n-- 2. Aplicar filtros com base em 'event_date', 'project' e 'product_id'.\n-- 3. Selecionar colunas específicas.\n-- 4. Criar um arquivo JSON com os resultados.\n\n-- Para replicar essa lógica em SQL, seria necessário:\n-- 1. Migrar os dados do MongoDB para um banco de dados relacional (por exemplo, PostgreSQL, MySQL).\n-- 2. Criar uma tabela correspondente à estrutura da coleção 'events'.\n-- 3. Importar os dados do MongoDB para essa tabela.\n\n-- Assumindo que os dados foram migrados para uma tabela chamada 'events_table' em um banco de dados relacional, o seguinte script SQL simula a extração dos dados:\n\n/*\nCREATE TABLE events_table (\n    msisdn VARCHAR(255),\n    utm_source VARCHAR(255),\n    utm_medium VARCHAR(255),\n    utm_campaign VARCHAR(255),\n    Referer VARCHAR(255),\n    project VARCHAR(255),\n    event VARCHAR(255),\n    element VARCHAR(255),\n    user_id VARCHAR(255),\n    url VARCHAR(255),\n    offer_type VARCHAR(255),\n    service_type VARCHAR(255),\n    requestId VARCHAR(255),\n    offer_id VARCHAR(255),\n    offer_name VARCHAR(255),\n    success BOOLEAN,\n    event_date DATE\n);\n*/\n\n\nSELECT\n    msisdn,\n    utm_source,\n    utm_medium,\n    utm_campaign,\n    Referer,\n    project,\n    event,\n    element,\n    user_id,\n    url,\n    offer_type,\n    service_type,\n    requestId,\n    offer_id,\n    offer_name,\n    success\nFROM\n    events_table\nWHERE\n    event_date >= 'data_inicial' AND event_date < 'data_final'\n    AND product_id = 18\n    AND (project IN ('TIM-FUN', 'CLUBE-BELEZA', 'prezao_uber', 'movistar'));\n\n-- Este SQL apenas extrai os dados. A parte da criação do arquivo JSON precisaria ser feita com outra ferramenta (por exemplo, um script Python que executa esta query e formata o resultado em JSON).",
    "MySQL keep_on: flash_sms_claro": "-- Apaga os dados existentes para a data especificada\nDELETE FROM keep_on.flash_sms_claro\nWHERE date = '{data_inicial}';\n\n-- Insere os novos dados da flash_claro.message_outbound para keep_on.flash_sms_claro\nINSERT INTO keep_on.flash_sms_claro (campaign_id, date, notification, status, message)\nSELECT \n    campaign_id,\n    DATE(sent_at),\n    id,\n    status,\n    message\nFROM flash_claro.message_outbound\nWHERE sent_at BETWEEN '{data_inicial} 00:00:00' AND '{data_inicial} 23:59:59';"
  }
}